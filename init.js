// Generated by CoffeeScript 1.9.0
(function() {
  var FaceApp,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  FaceApp = (function() {
    function FaceApp(_at_canvas, _at_picture) {
      this.canvas = _at_canvas;
      this.picture = _at_picture;
      this.editAction = __bind(this.editAction, this);
      this.editBoundary = __bind(this.editBoundary, this);
      this.addOrRemoveSite = __bind(this.addOrRemoveSite, this);
      this.detectFaces = __bind(this.detectFaces, this);
      this.removeClosest = __bind(this.removeClosest, this);
      this.doVoronoi = __bind(this.doVoronoi, this);
      this.drawMarkers = __bind(this.drawMarkers, this);
      this.drawMask = __bind(this.drawMask, this);
      this.drawNumbers = __bind(this.drawNumbers, this);
      this.drawPolygon = __bind(this.drawPolygon, this);
      this.drawCells = __bind(this.drawCells, this);
      this.draw = __bind(this.draw, this);
      this.drawImage = __bind(this.drawImage, this);
      this.clipCells = __bind(this.clipCells, this);
      this.sortFaces = __bind(this.sortFaces, this);
      this.resetData = __bind(this.resetData, this);
      this.update = __bind(this.update, this);
      this.picture.load((function(_this) {
        return function() {
          var pic;
          pic = _this.picture[0];
          pic.crossOrigin = "Anonymous";
          _this.canvas[0].width = pic.naturalWidth;
          _this.canvas[0].height = pic.naturalHeight;
          _this.canvas.width(pic.naturalWidth);
          _this.canvas.height(pic.naturalHeight);
          return _this.drawImage();
        };
      })(this));
      this.ctx = this.canvas[0].getContext('2d');
      this.cells = [];
      this.names = [];
      this.printView = false;
      this.editingBoundary = false;
      this.boundary = [];
      this.update();
      this.init();
    }

    FaceApp.prototype.update = function() {
      this.doVoronoi();
      this.sortFaces();
      return this.draw(this.printView);
    };

    FaceApp.prototype.resetData = function() {
      this.cells = [];
      return this.update();
    };

    FaceApp.prototype.sortFaces = function() {
      var score;
      score = function(c) {
        return c.y * 100 + c.x;
      };
      this.cells.sort(function(a, b) {
        return score(a) - score(b);
      });
      return this.cells.forEach(function(cell, index) {
        return cell.id = index + 1;
      });
    };

    FaceApp.prototype.clipCells = function() {
      var cell, other, p, res, _i, _len, _ref, _results;
      _ref = this.cells;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cell = _ref[_i];
        other = (function() {
          var _j, _len1, _ref1, _results1;
          _ref1 = cell.points;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j += 2) {
            p = _ref1[_j];
            _results1.push(p);
          }
          return _results1;
        })();
        res = (function() {
          var _j, _len1, _ref1, _results1;
          _ref1 = clip(this.boundary, other.reverse());
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            p = _ref1[_j];
            _results1.push(p);
          }
          return _results1;
        }).call(this);
        if (res.length === 0) {
          res = other;
        }
        _results.push(cell.points = res);
      }
      return _results;
    };

    FaceApp.prototype.drawImage = function() {
      var pic;
      pic = this.picture[0];
      return this.ctx.drawImage(pic, 0, 0);
    };

    FaceApp.prototype.draw = function(print) {
      this.ctx.clearRect(0, 0, this.canvas.width(), this.canvas.height());
      this.drawImage();
      if (print) {
        this.drawMask();
      }
      this.drawCells(print ? '#000' : '#fff');
      if (!print) {
        this.drawMarkers();
      }
      if (print) {
        this.drawNumbers();
      }
      if (this.editingBoundary) {
        return this.drawPolygon(this.boundary, '#0f0');
      }
    };

    FaceApp.prototype.drawCells = function(style) {
      var cell, _i, _len, _ref, _results;
      _ref = this.cells;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cell = _ref[_i];
        _results.push(this.drawPolygon(cell.points, style));
      }
      return _results;
    };

    FaceApp.prototype.drawPolygon = function(polygon, style) {
      var p, _i, _len;
      this.ctx.strokeStyle = style;
      if (polygon.length === 0) {
        return;
      }
      this.ctx.beginPath();
      this.ctx.moveTo(polygon[0][0], polygon[0][1]);
      for (_i = 0, _len = polygon.length; _i < _len; _i++) {
        p = polygon[_i];
        this.ctx.lineTo(p[0], p[1]);
      }
      this.ctx.closePath();
      return this.ctx.stroke();
    };

    FaceApp.prototype.drawNumbers = function() {
      var cell, ctx, rect, _i, _len, _ref, _results;
      ctx = this.ctx;
      ctx.fillStyle = "#000";
      ctx.font = "20px Sans";
      ctx.textAlign = "center";
      ctx.textBaseline = "middle";
      rect = this.canvas[0].getBoundingClientRect();
      _ref = this.cells;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cell = _ref[_i];
        _results.push(ctx.fillText(cell.id, cell.x, cell.y));
      }
      return _results;
    };

    FaceApp.prototype.drawMask = function() {
      this.ctx.fillStyle = "rgba(255,255,255,0.5)";
      return this.ctx.fillRect(0, 0, this.canvas.width(), this.canvas.height());
    };

    FaceApp.prototype.drawMarkers = function() {
      var ctx;
      if (this.cells.length === 0) {
        return;
      }
      ctx = this.ctx;
      ctx.strokeStyle = "#000";
      ctx.lineWidth = 2;
      ctx.fillStyle = "rgba(150,150,255,0.35)";
      this.cells.forEach(function(cell) {
        var w;
        w = 4;
        ctx.beginPath();
        ctx.arc(cell.x, cell.y, 2 * w, 0, Math.PI * 2, true);
        ctx.fill();
        return ctx.stroke();
      });
      return ctx.lineWidth = 1;
    };

    FaceApp.prototype.doVoronoi = function() {
      var bbox, c, cell, diagram, he, sites, voronoi;
      bbox = {
        xl: 0,
        xr: this.canvas.width(),
        yt: 0,
        yb: this.canvas.height()
      };
      voronoi = new Voronoi();
      sites = (function() {
        var _i, _len, _ref, _results;
        _ref = this.cells;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          _results.push({
            x: c.x,
            y: c.y
          });
        }
        return _results;
      }).call(this);
      diagram = voronoi.compute(sites, bbox);
      this.cells = (function() {
        var _i, _len, _ref, _results;
        _ref = diagram.cells;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cell = _ref[_i];
          _results.push({
            id: cell.site.voronoiId,
            x: cell.site.x,
            y: cell.site.y,
            points: _.flatten((function() {
              var _j, _len1, _ref1, _results1;
              _ref1 = cell.halfedges;
              _results1 = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                he = _ref1[_j];
                _results1.push([[he.getStartpoint().x, he.getStartpoint().y], [he.getEndpoint().x, he.getEndpoint().y]]);
              }
              return _results1;
            })(), true)
          });
        }
        return _results;
      })();
      if (this.boundary.length > 0) {
        return this.clipCells();
      }
    };

    FaceApp.prototype.removeClosest = function(cells, pos) {
      var dist, minDist, minIndex;
      dist = function(a, b) {
        return Math.sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
      };
      minIndex = -1;
      minDist = 5 * (this.canvas.width() + this.canvas.height());
      this.cells.forEach(function(cell, idx) {
        var d;
        d = dist(cell, pos);
        if (d < minDist) {
          minDist = d;
          return minIndex = idx;
        }
      });
      if (minIndex === -1) {
        return;
      }
      return this.cells.splice(minIndex, 1);
    };

    FaceApp.prototype.detectFaces = function(e) {
      $('#detectfaces').prop('disabled', true);
      this.resetData();
      return this.picture.faceDetection({
        async: true,
        grayscale: false,
        complete: (function(_this) {
          return function(f) {
            var face;
            _this.cells = (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = f.length; _i < _len; _i++) {
                face = f[_i];
                _results.push({
                  x: face.x + face.width / 2,
                  y: face.y + face.height / 2
                });
              }
              return _results;
            })();
            $('#detectfaces').prop('disabled', false);
            return _this.update();
          };
        })(this),
        error: function(code, msg) {
          return console.log('Oh no! Error ' + code + ' occurred. The message was "' + msg + '".');
        }
      });
    };

    FaceApp.prototype.addOrRemoveSite = function(e) {
      var cx, cy, rect;
      rect = this.canvas[0].getBoundingClientRect();
      cx = (e.clientX - rect.left) << 0;
      cy = (e.clientY - rect.top) << 0;
      if (e.ctrlKey || e.metaKey) {
        return this.removeClosest(this.cells, {
          x: cx,
          y: cy
        });
      } else {
        return this.cells.push({
          x: cx,
          y: cy
        });
      }
    };

    FaceApp.prototype.editBoundary = function(e) {
      var cx, cy, rect;
      rect = this.canvas[0].getBoundingClientRect();
      cx = (e.clientX - rect.left) << 0;
      cy = (e.clientY - rect.top) << 0;
      if (e.ctrlKey || e.metaKey) {
        return this.boundary = this.boundary.slice(0, -1);
      } else {
        return this.boundary.push([cx, cy]);
      }
    };

    FaceApp.prototype.editAction = function(e) {
      if (this.editingBoundary) {
        this.editBoundary(e);
      } else {
        this.addOrRemoveSite(e);
      }
      return this.update();
    };

    FaceApp.prototype.init = function() {
      var button, printButton;
      button = $('#detectfaces');
      button.prop('disabled', false);
      button.click(this.detectFaces);
      printButton = $('#printview');
      printButton.prop('disabled', false);
      printButton.click((function(_this) {
        return function() {
          _this.printView = !_this.printView;
          _this.update();
          return printButton.attr('value', (_this.printView ? "edit" : "print") + " view");
        };
      })(this));
      this.canvas.click(this.editAction);
      $('#boundaryResetButton').click((function(_this) {
        return function() {
          _this.boundary = [];
          return _this.update();
        };
      })(this));
      $('#boundaryButton').click((function(_this) {
        return function() {
          _this.editingBoundary = !_this.editingBoundary;
          $('#boundaryButton').val("editing " + (_this.editingBoundary ? "boundary" : "faces"));
          $('#boundaryHelp').text(_this.editingBoundary ? 'You can edit the boundary the same way as you would the faces. Click to add a new vertex, Ctrl + Click (Cmd + Click) to remove the last one. Press button again to go back to editing faces.' : '');
          if (!_this.editingBoundary) {
            return _this.clipCells();
          }
        };
      })(this));
      $('#savehtml').click((function(_this) {
        return function() {
          var cell, polys;
          console.dir(_this.cells);
          polys = (function() {
            var _i, _len, _ref, _results;
            _ref = this.cells;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              cell = _ref[_i];
              _results.push({
                points: _.flatten(cell.points),
                id: cell.id,
                x: cell.x,
                y: cell.y
              });
            }
            return _results;
          }).call(_this);
          return $.get('/template.html', function(template) {
            var areas, image_src, n, namelis, output, p, pt, x;
            areas = (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = polys.length; _i < _len; _i++) {
                p = polys[_i];
                _results.push('<area type="poly" href="javascript:;" coords="' + ((function() {
                  var _j, _len1, _ref, _results1;
                  _ref = p.points;
                  _results1 = [];
                  for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                    pt = _ref[_j];
                    _results1.push((function() {
                      var _k, _len2, _results2;
                      _results2 = [];
                      for (_k = 0, _len2 = pt.length; _k < _len2; _k++) {
                        x = pt[_k];
                        _results2.push(x << 0);
                      }
                      return _results2;
                    })());
                  }
                  return _results1;
                })()) + '"' + ' data-id="' + p.id + '"' + ' data-x="' + p.x + '"' + ' data-y="' + p.y + '"' + '/>');
              }
              return _results;
            })();
            namelis = (function() {
              var _i, _len, _ref, _results;
              _ref = this.names;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                n = _ref[_i];
                _results.push(("<li><span class=\"last\">" + n.last + "</span>, ") + ("<span class=\"first\">" + n.first + "</span></li>"));
              }
              return _results;
            }).call(_this);
            image_src = ($('#loadimage').val().split(/[\\/]+/)).slice(-1)[0];
            template = template.replace('<%image%>', image_src);
            template = template.replace('<%names%>', namelis.join('\n'));
            template = template.replace('<%areas%>', areas.join('\n'));
            output = new Blob([template], {
              type: "text/html;charset=utf-8"
            });
            return saveAs(output, "output.html");
          });
        };
      })(this));
      $('#savefile').click((function(_this) {
        return function() {
          var c, data, foo;
          data = {
            faces: (function() {
              var _i, _len, _ref, _results;
              _ref = this.cells;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                c = _ref[_i];
                _results.push({
                  x: c.x,
                  y: c.y
                });
              }
              return _results;
            }).call(_this),
            boundary: _this.boundary
          };
          foo = new Blob([JSON.stringify(data, null, 2)], {
            type: "application/json;charset=utf-8"
          });
          return saveAs(foo, "faces.json");
        };
      })(this));
      $('#loadfile').change((function(_this) {
        return function(e) {
          var file, reader;
          file = e.target.files[0];
          if (file == null) {
            return;
          }
          reader = new FileReader();
          reader.onload = function(e) {
            var contents, error;
            contents = e.target.result;
            try {
              contents = JSON.parse(contents);
              _this.cells = contents.faces;
              _this.boundary = contents.boundary;
              return _this.update();
            } catch (_error) {
              error = _error;
            }
          };
          return reader.readAsText(file);
        };
      })(this));
      $('#loadnames').change((function(_this) {
        return function(e) {
          var file, reader;
          file = e.target.files[0];
          if (file == null) {
            return;
          }
          reader = new FileReader();
          reader.onload = function(e) {
            var contents, error, help, n, valid;
            contents = e.target.result;
            valid = false;
            try {
              contents = JSON.parse(contents);
              valid = _.all((function() {
                var _i, _len, _results;
                _results = [];
                for (_i = 0, _len = contents.length; _i < _len; _i++) {
                  n = contents[_i];
                  _results.push('first' in n && 'last' in n && 'id' in n);
                }
                return _results;
              })());
            } catch (_error) {
              error = _error;
            }
            if (valid) {
              _this.names = contents;
            }
            help = $('#namesHelp');
            help.removeClass();
            help.addClass('help');
            help.addClass(valid ? 'info' : 'error');
            return help.text((valid ? "Success! " + _this.names.length + " names loaded." : "Name list did not validate! Make sure your inputs conform to the format described above."));
          };
          return reader.readAsText(file);
        };
      })(this));
      return $('#loadimage').change(function(e) {
        var file, imageType, reader;
        file = $('#loadimage')[0].files[0];
        imageType = /image.*/;
        if (file.type.match(imageType)) {
          reader = new FileReader();
          reader.onload = (function(_this) {
            return function(e) {
              var img;
              img = $('#picture');
              return img.attr('src', reader.result);
            };
          })(this);
          return reader.readAsDataURL(file);
        } else {

        }
      });
    };

    return FaceApp;

  })();

  $(document).ready(function() {
    return new FaceApp($('#canvas'), $('#picture'));
  });

}).call(this);
